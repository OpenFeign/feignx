/*
 * Copyright 2019 OpenFeign Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package feign.assertions;

import feign.http.HttpHeader;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link HttpHeader} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHttpHeaderAssert<S extends AbstractHttpHeaderAssert<S, A>, A extends HttpHeader> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHttpHeaderAssert}</code> to make assertions on actual HttpHeader.
   * @param actual the HttpHeader we want to make assertions on.
   */
  protected AbstractHttpHeaderAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual HttpHeader is multipleValuesAllowed.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpHeader is not multipleValuesAllowed.
   */
  public S isMultipleValuesAllowed() {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("multipleValuesAllowed", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual HttpHeader is multipleValuesAllowed but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader is not multipleValuesAllowed.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpHeader is multipleValuesAllowed.
   */
  public S isNotMultipleValuesAllowed() {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("multipleValuesAllowed", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual HttpHeader is not multipleValuesAllowed but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's name is equal to the given one.
   * @param name the given name to compare the actual HttpHeader's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpHeader's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("name", String.class, actual);
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values contains the given String elements.
   * @param values the given elements that should be contained in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values does not contain all given String elements.
   */
  public S hasValues(String... values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (values == null) failWithMessage("Expecting values parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values contains the given String elements in Collection.
   * @param values the given elements that should be contained in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values does not contain all given String elements.
   */
  public S hasValues(java.util.Collection<? extends String> values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (values == null) {
      failWithMessage("Expecting values parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param values the given elements that should be contained in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values does not contain all given String elements.
   */
  public S hasOnlyValues(String... values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (values == null) failWithMessage("Expecting values parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param values the given elements that should be contained in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values does not contain all given String elements.
   */
  public S hasOnlyValues(java.util.Collection<? extends String> values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (values == null) {
      failWithMessage("Expecting values parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values does not contain the given String elements.
   *
   * @param values the given elements that should not be in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values contains any given String elements.
   */
  public S doesNotHaveValues(String... values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (values == null) failWithMessage("Expecting values parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader's values does not contain the given String elements in Collection.
   *
   * @param values the given elements that should not be in actual HttpHeader's values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values contains any given String elements.
   */
  public S doesNotHaveValues(java.util.Collection<? extends String> values) {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (values == null) {
      failWithMessage("Expecting values parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual), values.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpHeader has no values.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpHeader's values is not empty.
   */
  public S hasNoValues() {
    // check that actual HttpHeader we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have values but had :\n  <%s>";

    // check
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual).iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("values", java.util.Set.class, actual));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
