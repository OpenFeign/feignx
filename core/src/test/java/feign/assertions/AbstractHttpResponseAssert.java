/*
 * Copyright 2019 OpenFeign Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package feign.assertions;

import feign.http.HttpHeader;
import feign.http.HttpResponse;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link HttpResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHttpResponseAssert<S extends AbstractHttpResponseAssert<S, A>, A extends HttpResponse> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHttpResponseAssert}</code> to make assertions on actual HttpResponse.
   * @param actual the HttpResponse we want to make assertions on.
   */
  protected AbstractHttpResponseAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual HttpResponse's body is equal to the given one.
   * @param body the given body to compare the actual HttpResponse's body to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpResponse's body is not equal to the given one.
   */
  public S hasBody(java.io.InputStream body) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting body of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.io.InputStream actualBody = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("body", java.io.InputStream.class, actual);
    if (!Objects.areEqual(actualBody, body)) {
      failWithMessage(assertjErrorMessage, actual, body, actualBody);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's contentLength is equal to the given one.
   * @param contentLength the given contentLength to compare the actual HttpResponse's contentLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpResponse's contentLength is not equal to the given one.
   */
  public S hasContentLength(int contentLength) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting contentLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualContentLength = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("contentLength", int.class, actual);
    if (actualContentLength != contentLength) {
      failWithMessage(assertjErrorMessage, actual, contentLength, actualContentLength);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers contains the given HttpHeader elements.
   * @param headers the given elements that should be contained in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers does not contain all given HttpHeader elements.
   */
  public S hasHeaders(HttpHeader... headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers contains the given HttpHeader elements in Collection.
   * @param headers the given elements that should be contained in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers does not contain all given HttpHeader elements.
   */
  public S hasHeaders(java.util.Collection<? extends HttpHeader> headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers contains <b>only</b> the given HttpHeader elements and nothing else in whatever order.
   * @param headers the given elements that should be contained in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers does not contain all given HttpHeader elements.
   */
  public S hasOnlyHeaders(HttpHeader... headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers contains <b>only</b> the given HttpHeader elements in Collection and nothing else in whatever order.
   * @param headers the given elements that should be contained in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers does not contain all given HttpHeader elements.
   */
  public S hasOnlyHeaders(java.util.Collection<? extends HttpHeader> headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers does not contain the given HttpHeader elements.
   *
   * @param headers the given elements that should not be in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers contains any given HttpHeader elements.
   */
  public S doesNotHaveHeaders(HttpHeader... headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's headers does not contain the given HttpHeader elements in Collection.
   *
   * @param headers the given elements that should not be in actual HttpResponse's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers contains any given HttpHeader elements.
   */
  public S doesNotHaveHeaders(java.util.Collection<? extends HttpHeader> headers) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse has no headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpResponse's headers is not empty.
   */
  public S hasNoHeaders() {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have headers but had :\n  <%s>";

    // check
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual).iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", java.util.List.class, actual));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual HttpResponse's reason is equal to the given one.
   * @param reason the given reason to compare the actual HttpResponse's reason to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpResponse's reason is not equal to the given one.
   */
  public S hasReason(String reason) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting reason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualReason = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("reason", String.class, actual);
    if (!Objects.areEqual(actualReason, reason)) {
      failWithMessage(assertjErrorMessage, actual, reason, actualReason);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpResponse's status is equal to the given one.
   * @param status the given status to compare the actual HttpResponse's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpResponse's status is not equal to the given one.
   */
  public S hasStatus(int status) {
    // check that actual HttpResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualStatus = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("status", int.class, actual);
    if (actualStatus != status) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
